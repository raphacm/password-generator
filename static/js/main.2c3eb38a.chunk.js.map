{"version":3,"sources":["app/components/core/MainComponent/index.js","enums/passwordOptions.js","app/components/core/FormGroup/atoms/InputText/index.js","app/components/core/FormGroup/atoms/InputNumber/index.js","app/components/core/FormGroup/atoms/Checkbox/index.js","app/components/core/FormGroup/atoms/FormLabel/index.js","app/components/core/FormGroup/index.js","app/components/core/Button/index.js","app/components/PassGenerator/PasswordGenerator.js","utils/index.js","app/App.js","serviceWorker.js","index.js"],"names":["MainComponent","children","className","patterns","UPPERCASE","LOWERCASE","NUMBERS","SYMBOLS","passwordOptions","InputText","id","name","placeholder","value","readOnly","onChange","type","defaultProps","e","console","log","target","InputNumber","step","min","max","Checkbox","options","label","map","option","checked","onClick","key","defaultChecked","htmlFor","toLowerCase","FormLabel","FormGroup","renderInput","Button","disabled","buttonClass","btn","Object","values","join","PasswordGenerator","useState","password","setPassword","passwordSize","setPasswordSize","passwordRules","setRules","handleSelectRules","event","rules","preventDefault","selectedRules","rule","split","reverse","reverseRule","reverseSelectedRules","generatedPassword","length","idx","randomNumber","Math","random","concat","charAt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2c3eb38a.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./index.scss\";\n\nconst MainComponent = ({ children }) => {\n  return (\n    <main className=\"main-component\">\n      <div className=\"main-component__content\">\n        <div className=\"main-component__logo\" />\n        {children}\n      </div>\n    </main>\n  );\n};\n\nMainComponent.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default MainComponent;\n","export const patterns = {\n  UPPERCASE: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  LOWERCASE: \"abcdefghijklmnopqrstuvwxyz\",\n  NUMBERS: \"0123456789\",\n  SYMBOLS: \"#@!$%^&*-_[]{}();\",\n};\n\nexport const passwordOptions = {\n  UPPERCASE: \"UPPERCASE\",\n  LOWERCASE: \"LOWERCASE\",\n  NUMBERS: \"NUMBERS\",\n  SYMBOLS: \"SYMBOLS\",\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst InputText = ({ id, name, placeholder, value, readOnly, onChange }) => {\n  return (\n    <input\n      type=\"text\"\n      className={`form-group__control ${\n        readOnly ? \"form-group__control--disabled\" : \"\"\n      }`}\n      id={id}\n      name={name}\n      placeholder={placeholder}\n      value={value}\n      readOnly={readOnly}\n      onChange={onChange}\n    />\n  );\n};\n\nInputText.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  readOnly: PropTypes.bool,\n  onChange: PropTypes.func,\n};\n\nInputText.defaultProps = {\n  value: \"\",\n  readOnly: false,\n  onChange: e => console.log(e.target.value),\n};\n\nexport default InputText;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst InputNumber = ({ id, name, value, step, min, max, onChange }) => {\n  return (\n    <input\n      type=\"number\"\n      className=\"form-group__control\"\n      id={id}\n      name={name}\n      value={value}\n      step={step}\n      min={min}\n      max={max}\n      onChange={onChange}\n    />\n  );\n};\n\nInputNumber.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  step: PropTypes.string,\n  min: PropTypes.string,\n  max: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nInputNumber.defaultProps = {\n  value: \"0\",\n  step: \"1\",\n  min: \"0\",\n  max: \"32\",\n  onChange: e => console.log(e.target.value),\n};\n\nexport default InputNumber;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./index.scss\";\n\nconst Checkbox = ({ options, label }) => {\n  return (\n    <>\n      <h4>{label}</h4>\n      {options.map(option => {\n        const { id, name, value, checked, onClick } = option;\n        return (\n          <div key={id} className=\"checkbox-container\">\n            <input\n              type=\"checkbox\"\n              className=\"checkbox-container__input\"\n              id={id}\n              value={value}\n              name={name}\n              onClick={onClick}\n              defaultChecked={checked}\n            />\n            <label className=\"checkbox-container__label\" htmlFor={id}>\n              {name.toLowerCase()}\n            </label>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n\nCheckbox.propTypes = {\n  options: PropTypes.array.isRequired,\n};\n\nCheckbox.defaultProps = {\n  options: [\n    {\n      id: \"checkbox-id\",\n      name: \"checkbox-name\",\n      checked: false,\n      onClick: e => console.log(e.target.value),\n    },\n  ],\n};\n\nexport default Checkbox;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FormLabel = ({ htmlFor, label }) => {\n  return (\n    <label className=\"form-group__label\" htmlFor={htmlFor}>\n      {label}\n    </label>\n  );\n};\n\nFormLabel.propTypes = {\n  htmlFor: PropTypes.string,\n  label: PropTypes.string.isRequired,\n};\n\nFormLabel.defaultProps = {\n  htmlFor: \"\",\n};\n\nexport default FormLabel;\n","import React from \"react\";\nimport InputText from \"./atoms/InputText\";\nimport InputNumber from \"./atoms/InputNumber\";\nimport Checkbox from \"./atoms/Checkbox\";\nimport FormLabel from \"./atoms/FormLabel\";\nimport \"./index.scss\";\n\nconst FormGroup = ({\n  type,\n  id,\n  name,\n  placeholder,\n  label,\n  step,\n  min,\n  max,\n  value,\n  onChange,\n  options,\n}) => {\n  const renderInput = () => {\n    switch (type) {\n      case \"readOnly\":\n        return (\n          <InputText\n            readOnly\n            id={id}\n            name={name}\n            placeholder={placeholder || label}\n            value={value}\n            onChange={onChange}\n          />\n        );\n      case \"number\":\n        return (\n          <InputNumber\n            id={id}\n            name={name}\n            placeholder={placeholder || label}\n            onChange={onChange}\n            step={step}\n            min={min}\n            value={value}\n            max={max}\n          />\n        );\n      case \"checkbox\":\n        return <Checkbox label=\"Choose password weight\" options={options} />;\n      default:\n        return (\n          <InputText\n            id={id}\n            name={name}\n            placeholder={placeholder || label}\n            value={value}\n            onChange={onChange}\n          />\n        );\n    }\n  };\n\n  return (\n    <div className=\"form-group\">\n      {renderInput()}\n      <FormLabel htmlFor={id} label={label} />\n    </div>\n  );\n};\n\nexport default FormGroup;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./index.scss\";\n\nconst Button = ({ type, label, onClick, disabled }) => {\n  const buttonClass = {\n    btn: \"btn\",\n    \"btn--primary\": type === \"primary\" ? \"btn--primary\" : \"\",\n    \"btn--disabled\": disabled ? \"btn--disabled\" : \"\",\n  };\n\n  console.log(Object.values(buttonClass).join(\" \"));\n\n  return (\n    <button\n      type=\"button\"\n      className={Object.values(buttonClass).join(\" \")}\n      disabled={disabled}\n      onClick={onClick}\n    >\n      {label}\n    </button>\n  );\n};\n\nButton.defaultProps = {\n  disabled: false,\n  type: \"\",\n};\n\nButton.propTypes = {\n  type: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n};\n\nexport default Button;\n","import React, { useState } from \"react\";\nimport { passwordOptions, patterns } from \"../../../enums/passwordOptions\";\nimport FormGroup from \"../core/FormGroup\";\nimport { reverseSelectedRules } from \"../../../utils\";\nimport Button from \"../core/Button\";\n\nconst PasswordGenerator = () => {\n  const [password, setPassword] = useState(\"\");\n  const [passwordSize, setPasswordSize] = useState(\"10\");\n  const [passwordRules, setRules] = useState({\n    UPPERCASE: \"\",\n    LOWERCASE: \"\",\n    NUMBERS: \"\",\n    SYMBOLS: \"\",\n  });\n\n  const handleSelectRules = event => {\n    const { name } = event.target;\n    const rules = {\n      ...passwordRules,\n      [name]: passwordRules[name] === \"\" ? patterns[name] : \"\",\n    };\n\n    setRules(rules);\n  };\n\n  const handlePasswordSize = event => {\n    const { value } = event.target;\n    setPasswordSize(value);\n  };\n\n  const handleGeneratePassword = event => {\n    event.preventDefault();\n    const selectedRules = reverseSelectedRules(passwordRules);\n    let generatedPassword = \"\";\n\n    if (passwordSize > 0 && selectedRules.length > 0) {\n      for (let idx = 0; idx < passwordSize; idx++) {\n        const randomNumber = Math.random() * selectedRules.length;\n        generatedPassword = generatedPassword.concat(\n          selectedRules.charAt(randomNumber)\n        );\n      }\n      setPassword(generatedPassword);\n    }\n  };\n\n  return (\n    <form className=\"form__group\">\n      <FormGroup\n        type=\"readOnly\"\n        id=\"passwordField\"\n        name=\"passwordField\"\n        value={password}\n        label=\"Password\"\n        readOnly\n      />\n\n      <FormGroup\n        type=\"number\"\n        id=\"sizeField\"\n        name=\"sizeField\"\n        value={passwordSize}\n        label=\"Size\"\n        step=\"1\"\n        max=\"64\"\n        onChange={handlePasswordSize}\n      />\n\n      <FormGroup\n        type=\"checkbox\"\n        label=\"Choose a password weigth\"\n        options={[\n          {\n            id: \"uppercaseField\",\n            name: passwordOptions.UPPERCASE,\n            checked: false,\n            onClick: handleSelectRules,\n          },\n          {\n            id: \"lowercaseField\",\n            name: passwordOptions.LOWERCASE,\n            checked: false,\n            onClick: handleSelectRules,\n          },\n          {\n            id: \"numbersField\",\n            name: passwordOptions.NUMBERS,\n            checked: false,\n            onClick: handleSelectRules,\n          },\n          {\n            id: \"symbolsField\",\n            name: passwordOptions.SYMBOLS,\n            checked: false,\n            onClick: handleSelectRules,\n          },\n        ]}\n      />\n\n      <Button\n        type=\"primary\"\n        label=\"Generate\"\n        onClick={handleGeneratePassword}\n      />\n    </form>\n  );\n};\n\nexport default PasswordGenerator;\n","const reverseRule = rule => {\n  return rule.split(\"\").reverse().join(\"\");\n};\n\nexport const reverseSelectedRules = passwordRules => {\n  return Object.values(passwordRules)\n    .map(rule => reverseRule(rule))\n    .join(\"\");\n};\n","import React from \"react\";\nimport MainComponent from \"./components/core/MainComponent\";\nimport PasswordGenerator from \"./components/PassGenerator/PasswordGenerator\";\n\nfunction App() {\n  return (\n    <MainComponent>\n      <PasswordGenerator />\n    </MainComponent>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./app/App.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}